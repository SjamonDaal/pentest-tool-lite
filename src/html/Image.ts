import Test from '../Test';

class Image extends Test {
  protected request: IRequest;

  protected parseHTML: (result: any) => Promise<any>;

  protected getResources: (result: any) => string[];

  protected logger: ILogger;

  constructor(
    request: IRequest,
    parseHTML: (result: any) => Promise<any>,
    getResources: (result: any) => string[],
    logger: ILogger) {
    super();
    this.request = request;
    this.parseHTML = parseHTML;
    this.getResources = getResources;
    this.logger = logger;
  }

  public async run(url: string): Promise<IResult> {
    this.logger.info('Starting Image test...');
    const result = await this.request.get(url);
    const parsedHtml = await this.parseHTML(result);
    const resources = await this.getResources(parsedHtml);
    const files = this.filterImageFiles(resources);
    const subChecks = await Promise.all(files.map(async (file) => await this.checkFile(file)));

    return this.getResult('Image', this.getStatus(subChecks), subChecks);
  }

  protected filterImageFiles(paths: string[]): string[] {
    const regxJpg = new RegExp('.*\\/([a-z0-9.-])+(\\.jpg)((\\?)?(.*))', 'i');
    const regxJpeg = new RegExp('.*\\/([a-z0-9.-])+(\\.jpeg)((\\?)?(.*))', 'i');
    const regxPng = new RegExp('.*\\/([a-z0-9.-])+(\\.png)((\\?)?(.*))', 'i');
    const regxSvg = new RegExp('.*\\/([a-z0-9.-])+(\\.svg)((\\?)?(.*))', 'i');
    return paths.filter((path) => {
      return regxJpg.test(path) || regxJpeg.test(path) || regxPng.test(path) || regxSvg.test(path);
    });
  }

  protected async checkFile(file: string): Promise<IResult> {
    const filename = file.substr(file.lastIndexOf('/'));
    this.logger.debug(`Checking ${filename}...`);
    const result = await this.request.get(file);

    const isAvailable = this.isFileAvailable(result);
    const availableResult = this.getResult('Available', isAvailable ? 'SUCCESSFUL' : 'ERROR');
    if (!isAvailable) {
      return this.getResult(filename, this.getStatus([ availableResult ]), [ availableResult ]);
    }

    const subChecks = [
      this.getResult('Available', 'SUCCESSFUL'),
      this.getResult('Cache-Control', this.isCached(result) ? 'SUCCESSFUL' : 'UNSUCCESSFUL'),
      this.getResult(
        'X-Content-Type-Options',
        this.hasXContentTypeOptionsHeader(result) ? 'SUCCESSFUL' : 'UNSUCCESSFUL'),
    ];

    return this.getResult(filename, this.getStatus(subChecks), subChecks);
  }

  protected isFileAvailable(result: any): boolean {
    if (result.response.statusCode === 404 || result.response.statusCode === 500) {
      return false;
    }
    return true;
  }

  protected isCached(result: any): boolean {
    return result.response.headers.hasOwnProperty('cache-control');
  }

  protected hasXContentTypeOptionsHeader(result: any): boolean {
    return result.response.headers.hasOwnProperty('x-content-type-options');
  }
}

export default Image;
