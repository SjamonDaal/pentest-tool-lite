import { parseXml } from '../functions';

/**
 * Check URL if contains sitemap data. If URL is not direct link
 * to *.xml file, it will try to search it. For example by default
 * it is located in the root of the page (/sitemap.xml) or it can
 * be mentioned in /robots.txt.
 *
 * There are 2 types of sitemap. One is common, which starts with
 * <urlset> tag and then there is sitemap index, wich is used
 * to group multiple sitemap files. This starts with <sitemapindex>
 * tag.
 *
 * @see https://en.wikipedia.org/wiki/Sitemaps
 * @see https://www.sitemaps.org/protocol.html
 * @see https://technicalseo.com/tools/docs/robots-txt/
 */
class Sitemap {
  protected request: RequestInterface;

  constructor(request: RequestInterface) {
    this.request = request;
  }

  public async run(url: string) {
    /*
    if (!url.endsWith('.xml')) {
      
    }
    */
    const sitemap: any = await this.loadSitemap(url);
    // console.log(sitemap);
    return sitemap.urlset.url.map((line: any) => line);
  }

  protected async searchSitemaps(url: string) {
    // check /sitemap.xml
    // check /robots.txt
  }

  protected async loadSitemap(url: string) {
    const xml = await this.request.get(url);
    const sitemap: any = await parseXml(xml);

    if (!this.isIndex(sitemap)) {
      return sitemap;
    }

    const sitemapUrls = this.getSitemapUrls(sitemap);
    const sitemaps = await Promise.all(
      sitemapUrls.map(async (sitemapUrl: string) => await this.loadSitemap(sitemapUrl)));

      console.log(sitemaps);
    return {
      urlset: {
        url: sitemaps.map(sitemap => sitemap.urlset.url),
      },
    };
  }

  protected isIndex(sitemap: any): boolean {
    return 'sitemapindex' in sitemap;
  }

  protected getSitemapUrls(sitemapIndex: any): string[] {
    return sitemapIndex.sitemapindex.sitemap.map((sitemap: any) => sitemap.loc[0]);
  }
}

export default Sitemap;
