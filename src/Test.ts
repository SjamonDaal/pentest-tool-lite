import Result from './common/Result';

abstract class Test {
  protected grep: string[];

  protected exclude: string[];

  constructor(config: any = { grep: [], exclude: [] }) {
    this.grep = config.grep;
    this.exclude = config.exclude;
  }

  public abstract async run(url: string): Promise<IResult>;

  protected getResult(title: string, status: string, results: IResult[] | null = null): IResult {
    return new Result(title, status, results);
  }

  protected getStatus(results: IResult[]): string {
    const error = results.find((result) => result.getStatus() === 'ERROR');
    if (typeof error !== 'undefined') {
      return 'ERROR';
    }

    const unsuccessful = results.find((result) => result.getStatus() === 'UNSUCCESSFUL');
    if (typeof unsuccessful !== 'undefined') {
      return 'UNSUCCESSFUL';
    }

    return 'SUCCESSFUL';
  }

  protected async runTest(name: string, test: Test, url: string): Promise<IResult> {
    if (!this.isTestEnabled(name)) {
      return null;
    }
    return await test.run(url);
  }

  protected isTestEnabled(name: string): boolean {
    if (this.grep.length > 0) {
      return this.grep.includes(name);
    }

    if (this.exclude.length > 0) {
      return !this.exclude.includes(name);
    }

    return true;
  }
}

export default Test;
